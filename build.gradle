plugins {
    id "java"
    id "io.freefair.lombok" version "6.4.3.1"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id "org.springframework.boot" version "2.3.2.RELEASE"
}

group = "com.sample"
version = "0.3.0-SNAPSHOT"

ext {
    // https://github.com/alibaba/spring-cloud-alibaba/wiki/版本说明#毕业版本依赖关系推荐使用
    springCloudVersion = "Hoxton.SR9"
    springCloudAlibabaVersion = "2.2.6.RELEASE"
    knife4jVersion = "3.0.3"
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
    maven { url "https://maven.aliyun.com/repository/public" }
    maven { url "https://repository.incarcloud.com/content/groups/public" }
}

dependencies {
    implementation "org.slf4j:slf4j-api"

    implementation "org.springframework.boot:spring-boot-starter"
//    implementation("org.springframework.boot:spring-boot-starter-web") {
//        exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
//    }
//    implementation "org.springframework.boot:spring-boot-starter-undertow"

    implementation "com.alibaba.cloud:spring-cloud-starter-stream-rocketmq"

    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "io.micrometer:micrometer-registry-prometheus"

    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
        mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:$springCloudAlibabaVersion"
        mavenBom "com.github.xiaoymin:knife4j-dependencies:$knife4jVersion"
    }

    dependencies {
        dependencySet(group: "org.slf4j", version: "1.7.36") {
            entry "slf4j-api"
            entry "slf4j-simple"
        }

        dependency "org.apache.commons:commons-io:1.3.2"
        dependency "org.apache.commons:commons-lang3:3.12.0"
        dependency "org.apache.commons:commons-collections4:4.4"
    }
}

compileJava {
    options.encoding = "UTF-8"
    options.compilerArgs << "-Xlint:unchecked"
}

compileTestJava {
    options.encoding = "UTF-8"
    options.compilerArgs << "-Xlint:unchecked"
}

test {
    useJUnitPlatform()
}

bootJar {
    enabled false
}

task checkstyle(type: Checkstyle) {
    source = "src"
    include "**/*.java"
    ignoreFailures false
}

//checkstyleMain.exclude("**/proto/**/*.java")

task removeLombokConfig() {
    def subProjectPath = project.projectDir
    if (null != subProjectPath) {
        def lombokConfigFile = new File(subProjectPath, "lombok.config")
        if (lombokConfigFile.exists()) {
            lombokConfigFile.delete()
        }
    }
}

task removeOutputLog() {
    def subProjectPath = project.projectDir
    if (null != subProjectPath) {
        subProjectPath.list().each { filename ->
            if (filename.endsWith(".log") || filename.equalsIgnoreCase("logs")) {
                def subPath = new File(subProjectPath, filename)
                if (subPath.isDirectory()) {
                    for (File leafFile : subPath.listFiles()) {
                        leafFile.delete()
                    }
                } else {
                    subPath.delete()
                }
            }
        }
    }
}

defaultTasks "assemble"